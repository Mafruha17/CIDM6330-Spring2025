"""
Django settings for Assignment05 project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import environ

from pathlib import Path
from datetime import timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 1️⃣ Instantiate django-environ with env vars
env = environ.Env(
    SECRET_KEY=(str, ""),
    DEBUG=(bool, False),
    POSTGRES_USER=(str, "postgres"),
    POSTGRES_PASSWORD=(str, ""),
    OPENAI_API_KEY=(str, ""),
    OPENAI_MODEL=(str, "gpt-4o-mini"),  # ← note the comma here
)  # ← this closes the Env( … ) call



# 2) load the .env file into os.environ
env_file = BASE_DIR / ".env"
if env_file.exists():
    environ.Env.read_env(env_file)
else:
    # optional: warn if missing
    print("⚠️  Warning: .env file not found at", env_file)

# 3) now pull every setting from env()
SECRET_KEY = env("SECRET_KEY")
DEBUG = env("DEBUG")


# Celery / Redis
CELERY_BROKER_URL = "redis://redis:6379/0"  
CELERY_RESULT_BACKEND = "redis://redis:6379/1"


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-z_pp_rkg@^_hf6uc4igsjvn&=3(y4eqb0xzl=6)2h=f06y-^om'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mainapp',
    'ai_services',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djconfig.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# DATABASES block to pull from env …
# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
   "default": {
       "ENGINE":   "django.db.backends.postgresql",
       "NAME":     env("POSTGRES_DB", default="my_database"),
      "USER":     env("POSTGRES_USER"),
      "PASSWORD": env("POSTGRES_PASSWORD"),
      "HOST":     "db",
      "PORT":     "5432",
    }
}
# Now pull those values into Django settings:
OPENAI_API_KEY = env("OPENAI_API_KEY")    # e.g. sk-...
OPENAI_MODEL   = env("OPENAI_MODEL")      # e.g. "gpt-4o-mini"

WSGI_APPLICATION = 'djconfig.wsgi.application'


""" 
DATABASES = {


    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'my_database',  # Change this to your actual database name
        'USER': 'postgres',  
        'PASSWORD': 'trustAlliswell',  # Replace with your actual password
        'HOST': 'db',            #'localhost' This one is changed for container
        'PORT': '5432',
    }
}
"""

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    # 'SIGNING_KEY': 'your-secret-key',  # Usually auto-chosen from SECRET_KEY
    # 'ALGORITHM': 'HS256',
    # etc.
}
